You are a senior full-stack engineer in Replit. The **Save Material** button still does not persist. Execute a **forensic, end-to-end fix** with hard instrumentation to identify and resolve the actual failure. Outcome: clicking **Save** inserts into Postgres, returns **201** JSON with `id`, immediately updates the Materials Library & Editor Sidebar, and materials are attachable to masks. **Do not rename/remove** existing keys/routes; all changes **additive**. TypeScript everywhere.

================================================================================
PHASE 0 — TURN ON FORENSIC LOGGING (TEMP, REMOVE AFTER PASS)
================================================================================
Add a request/response logger and error handler.

**server/plugins/logging.ts**
```ts
import { FastifyInstance } from 'fastify';

export default async function logging(app: FastifyInstance) {
  app.addHook('onRequest', async (req) => {
    app.log.info({ url: req.url, method: req.method }, '[http] → request');
  });
  app.addHook('onResponse', async (req, reply) => {
    app.log.info({ url: req.url, status: reply.statusCode }, '[http] ← response');
  });
  app.setErrorHandler((err, req, reply) => {
    app.log.error({ err, url: req.url, body: req.body }, '[http] error');
    reply.status(500).send({ error: 'INTERNAL_ERROR', message: err.message });
  });
}
server/index.ts (ensure these are mounted BEFORE routes)

ts
Copy code
import logging from './plugins/logging';
import fastifyCors from '@fastify/cors';

app.register(fastifyCors, { origin: true, credentials: true, methods: ['GET','POST','PATCH','DELETE','OPTIONS'] });
app.register(logging);
================================================================================
PHASE 1 — GUARANTEE ROUTE IS MOUNTED & HIT (NO 404/SHADOW)
Many “still nothing” cases are: wrong path, route not registered, or shadowed by a catch-all.

Ensure routes import and registration happen before any 404 or static handler.

server/index.ts

ts
Copy code
import { materialsRoutes } from './routes/materials';
app.register(materialsRoutes); // must be before notFound or static
Add a health and echo to confirm connectivity quickly.

server/routes/debug.ts

ts
Copy code
import { FastifyInstance } from 'fastify';
export async function debugRoutes(app: FastifyInstance) {
  app.get('/api/_health', async () => ({ ok: true, ts: Date.now() }));
  app.post('/api/_echo', async (req) => ({ got: req.body }));
}
server/index.ts

ts
Copy code
import { debugRoutes } from './routes/debug';
app.register(debugRoutes);
Vite proxy (if applicable) must point to backend.

client/vite.config.ts (if FE dev server proxies to BE)

ts
Copy code
server: {
  proxy: {
    '/api': {
      target: process.env.VITE_API_PROXY_TARGET || 'http://localhost:3000',
      changeOrigin: true
    }
  }
}
================================================================================
PHASE 2 — BULLETPROOF CREATE ENDPOINT (COERCE + CAMEL/SNAKE + 201)
server/routes/materials.ts (harden; keep names as-is elsewhere)

ts
Copy code
import { FastifyInstance } from 'fastify';
import { z } from 'zod';
import { sql } from '../db';
import { randomUUID } from 'crypto';

const coNum = z.coerce.number().refine(v => !Number.isNaN(v), 'NaN').optional().nullable();
const strOpt = z.string().trim().optional().nullable();

const MaterialCreateSchema = z.object({
  name: z.string().min(1),
  category: z.enum(['coping','waterline_tile','interior','paving','fencing']),
  unit: z.enum(['m2','lm','each']),
  // allow both snake & camel on inputs:
  sku: strOpt,
  price: coNum, priceAmount: coNum,
  cost: coNum,
  wastage_pct: coNum, wastagePct: coNum,
  margin_pct: coNum, marginPct: coNum,
  tile_width_mm: coNum, tileWidthMm: coNum,
  tile_height_mm: coNum, tileHeightMm: coNum,
  sheet_width_mm: coNum, sheetWidthMm: coNum,
  sheet_height_mm: coNum, sheetHeightMm: coNum,
  grout_width_mm: coNum, groutWidthMm: coNum,
  thickness_mm: coNum, thicknessMm: coNum,
  finish: strOpt,
  texture_url: strOpt, textureUrl: strOpt,
  thumbnail_url: strOpt, thumbnailUrl: strOpt,
  supplier: strOpt,
  source_url: strOpt, sourceUrl: strOpt,
  notes: strOpt,
  org_id: strOpt, orgId: strOpt
}).transform((b: any) => ({
  name: b.name,
  sku: b.sku ?? null,
  category: b.category,
  unit: b.unit,
  price: b.price ?? b.priceAmount ?? null,
  cost: b.cost ?? null,
  wastage_pct: b.wastage_pct ?? b.wastagePct ?? null,
  margin_pct: b.margin_pct ?? b.marginPct ?? null,
  tile_width_mm: b.tile_width_mm ?? b.tileWidthMm ?? null,
  tile_height_mm: b.tile_height_mm ?? b.tileHeightMm ?? null,
  sheet_width_mm: b.sheet_width_mm ?? b.sheetWidthMm ?? null,
  sheet_height_mm: b.sheet_height_mm ?? b.sheetHeightMm ?? null,
  grout_width_mm: b.grout_width_mm ?? b.groutWidthMm ?? null,
  thickness_mm: b.thickness_mm ?? b.thicknessMm ?? null,
  finish: b.finish ?? null,
  texture_url: b.texture_url ?? b.textureUrl ?? null,
  thumbnail_url: b.thumbnail_url ?? b.thumbnailUrl ?? null,
  supplier: b.supplier ?? 'PoolTile',
  source_url: b.source_url ?? b.sourceUrl ?? null,
  notes: b.notes ?? null,
  org_id: b.org_id ?? b.orgId ?? null
}));

export async function materialsRoutes(app: FastifyInstance) {
  app.post('/api/materials', async (req, reply) => {
    app.log.info({ body: req.body }, '[materials] POST body');
    const parsed = MaterialCreateSchema.safeParse(req.body);
    if (!parsed.success) {
      app.log.warn({ zod: parsed.error.flatten() }, '[materials] invalid');
      return reply.code(400).send({ error: 'INVALID_INPUT', details: parsed.error.flatten() });
    }
    const b = parsed.data;
    const physical_repeat_m =
      (b.sheet_width_mm ? b.sheet_width_mm / 1000 : (b.tile_width_mm ? b.tile_width_mm / 1000 : null));

    const id = randomUUID();
    const q = `
      INSERT INTO materials (
        id, name, sku, category, unit, price, cost, wastage_pct, margin_pct,
        tile_width_mm, tile_height_mm, sheet_width_mm, sheet_height_mm,
        grout_width_mm, thickness_mm, finish,
        texture_url, thumbnail_url, physical_repeat_m,
        supplier, source_url, notes, org_id, is_active, created_at
      ) VALUES (
        $1,$2,$3,$4,$5,$6,$7,$8,$9,
        $10,$11,$12,$13,
        $14,$15,$16,
        $17,$18,$19,
        $20,$21,$22,$23,true, now()
      ) RETURNING *`;
    const params = [
      id, b.name, b.sku, b.category, b.unit, b.price, b.cost, b.wastage_pct, b.margin_pct,
      b.tile_width_mm, b.tile_height_mm, b.sheet_width_mm, b.sheet_height_mm,
      b.grout_width_mm, b.thickness_mm, b.finish,
      b.texture_url, b.thumbnail_url, physical_repeat_m,
      b.supplier, b.source_url, b.notes, b.org_id
    ];
    try {
      const { rows } = await sql.query(q, params);
      app.log.info({ id: rows[0].id }, '[materials] created');
      return reply.code(201).send(rows[0]);
    } catch (err: any) {
      app.log.error({ err, params }, '[materials] DB_INSERT_FAILED');
      return reply.code(500).send({ error: 'DB_INSERT_FAILED', message: err.message });
    }
  });

  // minimal list endpoint used by Library refresh
  app.get('/api/materials', async (req, reply) => {
    const { rows } = await sql.query(`SELECT * FROM materials WHERE is_active = true ORDER BY created_at DESC LIMIT 200`);
    reply.send({ items: rows });
  });
}
Ensure Postgres defaults exist:

sql
Copy code
CREATE EXTENSION IF NOT EXISTS pgcrypto;
ALTER TABLE materials ALTER COLUMN is_active SET DEFAULT true;
ALTER TABLE materials ALTER COLUMN created_at SET DEFAULT now();
================================================================================
PHASE 3 — FRONTEND: SINGLE CREATE CALL + HARD TOASTS + STATE UPSERT
client/src/lib/materials-api.ts

ts
Copy code
export async function createMaterialApi(input: any) {
  const num = (v: any) => (v === '' || v === undefined || v === null ? null : Number(v));
  const payload = {
    name: input.name,
    sku: input.sku ?? null,
    category: input.category,
    unit: input.unit,
    price: num(input.price ?? input.priceAmount),
    cost: num(input.cost),
    wastage_pct: num(input.wastage_pct ?? input.wastagePct),
    margin_pct: num(input.margin_pct ?? input.marginPct),
    tile_width_mm: num(input.tile_width_mm ?? input.tileWidthMm),
    tile_height_mm: num(input.tile_height_mm ?? input.tileHeightMm),
    sheet_width_mm: num(input.sheet_width_mm ?? input.sheetWidthMm),
    sheet_height_mm: num(input.sheet_height_mm ?? input.sheetHeightMm),
    grout_width_mm: num(input.grout_width_mm ?? input.groutWidthMm),
    thickness_mm: num(input.thickness_mm ?? input.thicknessMm),
    finish: input.finish ?? null,
    texture_url: input.texture_url ?? input.textureUrl ?? null,
    thumbnail_url: input.thumbnail_url ?? input.thumbnailUrl ?? null,
    supplier: input.supplier ?? 'PoolTile',
    source_url: input.source_url ?? input.sourceUrl ?? null,
    notes: input.notes ?? null,
    org_id: input.org_id ?? input.orgId ?? null
  };

  console.log('[materials] → POST /api/materials', payload);
  const res = await fetch(`${import.meta.env.VITE_API_BASE_URL || ''}/api/materials`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(payload)
  });

  const text = await res.text();
  let data: any;
  try { data = text ? JSON.parse(text) : null; } catch { data = { raw: text }; }

  console.log('[materials] ←', res.status, data);
  if (!res.ok) throw new Error(data?.error || data?.message || `Create failed ${res.status}`);
  return data;
}
client/src/state/materialsStore.ts

ts
Copy code
import create from 'zustand';
export type Material = { id: string; name: string; category: 'coping'|'waterline_tile'|'interior'|'paving'|'fencing'; unit: 'm2'|'lm'|'each'; price?: number|null; texture_url?: string|null; physical_repeat_m?: number|null; };
type S = { items: Record<string, Material>; upsert: (m: Material)=>void; list: ()=>Material[]; byCategory: (c: Material['category'])=>Material[]; hydrate: (arr: Material[])=>void; };
export const useMaterialsStore = create<S>((set, get) => ({
  items: {},
  upsert: (m) => set(s => ({ items: { ...s.items, [m.id]: m } })),
  list: () => Object.values(get().items),
  byCategory: (c) => Object.values(get().items).filter(i => i.category === c),
  hydrate: (arr) => set(() => ({ items: Object.fromEntries(arr.map(m => [m.id, m])) }))
}));
client/src/pages/materials.tsx (or wherever Library renders)

tsx
Copy code
import { useEffect } from 'react';
import { useMaterialsStore } from '../state/materialsStore';

export function MaterialsPage() {
  const hydrate = useMaterialsStore(s => s.hydrate);
  useEffect(() => {
    fetch('/api/materials', { credentials: 'include' })
      .then(r => r.json())
      .then(d => hydrate(d.items || []))
      .catch(e => console.error('[materials] list error', e));
  }, [hydrate]);
  // render grid from useMaterialsStore(s=>s.list())
}
client/src/components/materials/AddMaterialDrawer.tsx

tsx
Copy code
import { useState } from 'react';
import { createMaterialApi } from '../../lib/materials-api';
import { useMaterialsStore } from '../../state/materialsStore';
import { toast } from 'sonner';

export function AddMaterialDrawer({ onClose }: { onClose: () => void }) {
  const upsert = useMaterialsStore(s => s.upsert);
  const [saving, setSaving] = useState(false);
  const [form, setForm] = useState({ name: '', category: 'waterline_tile', unit: 'm2', price: '' });

  const onSave = async (e?: React.FormEvent) => {
    e?.preventDefault();
    if (!form.name || !form.category || !form.unit) {
      toast.error('Name, Category, Unit are required'); return;
    }
    setSaving(true);
    try {
      const created = await createMaterialApi(form);
      upsert(created);
      toast.success(`Saved “${created.name}”`);
      onClose();
    } catch (err: any) {
      console.error('[materials] save error', err);
      toast.error(err.message || 'Save failed');
    } finally {
      setSaving(false);
    }
  };

  return (
    <form onSubmit={onSave}>
      {/* inputs bound to form state */}
      <button type="submit" disabled={saving} className="btn btn-primary">{saving ? 'Saving…' : 'Save'}</button>
    </form>
  );
}
Ensure the Editor Sidebar reads from the same useMaterialsStore so new items appear instantly:

tsx
Copy code
const mats = useMaterialsStore(s => s.byCategory(activeCategory));
================================================================================
PHASE 4 — SMOKE TESTS YOU CAN RUN NOW (NO GUESSING)
API reachability

bash
Copy code
curl -sS http://localhost:3000/api/_health
Expect: {"ok":true,...}

Echo payload shape

bash
Copy code
curl -sS -X POST http://localhost:3000/api/_echo -H "Content-Type: application/json" \
  --data '{"name":"X","category":"waterline_tile","unit":"m2","price":"149.00","sheet_width_mm":"300","sheet_height_mm":"300"}'
Expect: body echoed with strings → confirms FE must coerce.

Direct create (bypasses FE)

bash
Copy code
curl -i -X POST http://localhost:3000/api/materials -H "Content-Type: application/json" --data '{
  "name":"Test Mosaic 23mm",
  "category":"waterline_tile",
  "unit":"m2",
  "price":149.00,
  "sheet_width_mm":300,
  "sheet_height_mm":300,
  "texture_url":"https://example.com/tx.jpg",
  "thumbnail_url":"https://example.com/t.jpg",
  "supplier":"PoolTile"
}'
Expect: HTTP/1.1 201 Created with JSON including id.

List

bash
Copy code
curl -sS http://localhost:3000/api/materials | jq .
Expect: newly created item present.

FE Save

Open Add Material, fill required fields, press Save.

In DevTools Network, confirm POST /api/materials 201 and JSON with id.

New material appears in Library and Editor Sidebar immediately.

================================================================================
PHASE 5 — COMMON STRAGGLERS (FIX IF SEEN)
Frontend posting to /materials instead of /api/materials → align path.

Missing credentials:'include' → cookie not sent; CORS blocks → add on FE and enable CORS on BE.

Form button not inside <form> or missing preventDefault → page reload cancels request → use <form onSubmit>.

Store mismatch → Sidebar reading old store/query → switch to useMaterialsStore.

DB NOT NULL on org_id → either pass current org or make column nullable.

500 with relation "materials" does not exist → run migrations or create table.

================================================================================
ACCEPTANCE CRITERIA
Save returns 201 with JSON containing id.

Material shows immediately in Materials Library and Editor Sidebar (same store).

Material can be attached to a mask and renders correctly.

Logging shows [materials] POST body → [materials] created → 201 response.

All other app features unchanged; no console errors.

Remove the debug/echo routes and extra logs after this passes.
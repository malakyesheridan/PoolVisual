You are a senior full-stack engineer in Replit. The **Save Material** flow is still failing and wasting time. Ship a **ruthless, zero-ambiguity vertical slice** that proves end-to-end insert works in minutes. Add hard instrumentation, a forced minimal insert API, and a visible in-app probe. Keep all existing code; **do not remove/rename** anything. All changes are **additive**. TypeScript everywhere.

GOAL (NON-NEGOTIABLE)
- Clicking **Save** (or **Test Save**) inserts a material row in Postgres, returns **201** with `id`, upserts shared store, and the material appears immediately in **Materials Library** and **Editor Sidebar**. If anything fails, the UI shows the exact failing hop.

ENV FLAGS
- Add to `.env` (FE & BE consumed via your existing env loader):
SAVE_MATERIALS_FORCE=true
USE_MATERIALS_API_V2=true

pgsql
Copy code

===============================================================================
BACKEND — HARD DEBUG PANEL + MINIMAL “FORCE SAVE” API (ADD, DO NOT TOUCH OLD)
===============================================================================

1) `server/routes/materialsForce.ts`
```ts
import { FastifyInstance } from 'fastify';
import { randomUUID } from 'crypto';

export async function materialsForceRoutes(app: FastifyInstance) {
  // Debug: schema + connectivity
  app.get('/api/_materials/debug', async (_req, reply) => {
    try {
      const { rows: ping } = await (app as any).sql.query('select 1 as ok');
      const { rows: cnt } = await (app as any).sql.query('select count(*)::int as n from materials');
      const { rows: cols } = await (app as any).sql.query(`
        select column_name, data_type, is_nullable
        from information_schema.columns
        where table_name = 'materials'
        order by ordinal_position
      `);
      reply.send({ ok: true, ping: ping[0], count: cnt[0]?.n ?? 0, columns: cols });
    } catch (err: any) {
      app.log.error({ err }, '[debug] materials schema failure');
      reply.code(500).send({ ok: false, error: err.message });
    }
  });

  // Minimal forced insert that bypasses complex validation/mapping
  app.post('/api/materials/_force', async (req, reply) => {
    const b = req.body as any;
    const name = (b?.name ?? '').toString().trim();
    const category = (b?.category ?? '').toString().trim();
    const unit = (b?.unit ?? '').toString().trim();
    if (!name || !category || !unit) {
      return reply.code(400).send({ error: 'REQUIRED_FIELDS', message: 'name, category, unit are required' });
    }
    const id = randomUUID();
    const q = `
      insert into materials (
        id, name, category, unit, price, sheet_width_mm, sheet_height_mm,
        tile_width_mm, tile_height_mm, texture_url, thumbnail_url,
        supplier, source_url, notes, is_active, created_at
      ) values (
        $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,true, now()
      ) returning *
    `;
    const p = [
      id, name, category, unit,
      b.price ?? null,
      b.sheet_width_mm ?? null, b.sheet_height_mm ?? null,
      b.tile_width_mm ?? null, b.tile_height_mm ?? null,
      b.texture_url ?? null, b.thumbnail_url ?? null,
      b.supplier ?? 'PoolTile', b.source_url ?? null, b.notes ?? null
    ];
    try {
      const { rows } = await (app as any).sql.query(q, p);
      app.log.info({ id: rows[0].id }, '[materials/_force] created');
      return reply.code(201).send(rows[0]);
    } catch (err: any) {
      app.log.error({ err }, '[materials/_force] insert failed');
      return reply.code(500).send({ error: 'DB_INSERT_FAILED', message: err.message });
    }
  });
}
Register route early and expose sql on app (no refactor), in server/index.ts

ts
Copy code
import fastifyCors from '@fastify/cors';
import { materialsForceRoutes } from './routes/materialsForce';
// assume you have a pg client like `sql` already; if not, import and attach:
import { sql } from './db';

app.register(fastifyCors, { origin: true, credentials: true, methods: ['GET','POST','PATCH','DELETE','OPTIONS'] });
(app as any).sql = sql; // quick attach for routes above
app.register(materialsForceRoutes); // BEFORE any notFound/static handlers
Safety bootstrap (idempotent), server/db/bootstrap.ts (call on boot)

ts
Copy code
import { sql } from './index';
export async function ensureMaterialsTable() {
  await sql.query('CREATE EXTENSION IF NOT EXISTS pgcrypto;');
  await sql.query(`
    CREATE TABLE IF NOT EXISTS materials (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      name text NOT NULL,
      sku text,
      category text NOT NULL,
      unit text NOT NULL,
      price numeric,
      cost numeric,
      wastage_pct numeric,
      margin_pct numeric,
      tile_width_mm int,
      tile_height_mm int,
      sheet_width_mm int,
      sheet_height_mm int,
      grout_width_mm int,
      thickness_mm int,
      finish text,
      texture_url text,
      thumbnail_url text,
      physical_repeat_m numeric,
      supplier text,
      source_url text,
      notes text,
      org_id uuid,
      is_active boolean NOT NULL DEFAULT true,
      created_at timestamptz NOT NULL DEFAULT now()
    );
  `);
}
Call bootstrap on start in server/index.ts

ts
Copy code
import { ensureMaterialsTable } from './db/bootstrap';
await ensureMaterialsTable();
===============================================================================
FRONTEND — OVERRIDE SAVE TO USE FORCE API + VISIBLE PROBE
Single client for force API, client/src/lib/materialsForceApi.ts

ts
Copy code
const API = import.meta.env.VITE_API_BASE_URL || '';

export async function createMaterialForce(input: any) {
  const payload = {
    name: input.name,
    category: input.category,
    unit: input.unit,
    price: input.price ?? null,
    sheet_width_mm: input.sheet_width_mm ?? input.sheetWidthMm ?? null,
    sheet_height_mm: input.sheet_height_mm ?? input.sheetHeightMm ?? null,
    tile_width_mm: input.tile_width_mm ?? input.tileWidthMm ?? null,
    tile_height_mm: input.tile_height_mm ?? input.tileHeightMm ?? null,
    texture_url: input.texture_url ?? input.textureUrl ?? null,
    thumbnail_url: input.thumbnail_url ?? input.thumbnailUrl ?? null,
    supplier: input.supplier ?? 'PoolTile',
    source_url: input.source_url ?? input.sourceUrl ?? null,
    notes: input.notes ?? null
  };

  const res = await fetch(`${API}/api/materials/_force`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(payload)
  });
  const text = await res.text();
  let data: any; try { data = text ? JSON.parse(text) : null; } catch { data = { raw: text }; }
  if (!res.ok) throw new Error(data?.message || data?.error || `Force create failed ${res.status}`);
  return data; // should include id
}

export async function debugMaterials() {
  const res = await fetch(`${API}/api/_materials/debug`, { credentials: 'include' });
  const data = await res.json();
  return data;
}
Shared store (if not already), client/src/state/materialsStore.ts

ts
Copy code
import create from 'zustand';
export type Material = { id: string; name: string; category: 'coping'|'waterline_tile'|'interior'|'paving'|'fencing'; unit:'m2'|'lm'|'each'; price?: number|null; texture_url?: string|null; physical_repeat_m?: number|null; sheet_width_mm?: number|null; tile_width_mm?: number|null; };
type S = { items: Record<string, Material>; upsert:(m:Material)=>void; hydrate:(arr:Material[])=>void; list:()=>Material[]; byCategory:(c:Material['category'])=>Material[]; };
export const useMaterialsStore = create<S>((set, get) => ({
  items: {},
  upsert: (m) => set(s => ({ items: { ...s.items, [m.id]: m } })),
  hydrate: (arr) => set(() => ({ items: Object.fromEntries(arr.map(m => [m.id, m])) })),
  list: () => Object.values(get().items),
  byCategory: (c) => Object.values(get().items).filter(x => x.category === c)
}));
Force wire the Save button behind flag, client/src/components/materials/AddMaterialDrawer.tsx

tsx
Copy code
import { useState } from 'react';
import { createMaterialForce } from '../../lib/materialsForceApi';
import { useMaterialsStore } from '../../state/materialsStore';
import { toast } from 'sonner';

const SAVE_FORCE = import.meta.env.VITE_SAVE_MATERIALS_FORCE === 'true' || (import.meta.env.SAVE_MATERIALS_FORCE === 'true');

export function AddMaterialDrawer({ onClose }: { onClose: () => void }) {
  const upsert = useMaterialsStore(s => s.upsert);
  const [saving, setSaving] = useState(false);
  const [form, setForm] = useState({ name:'', category:'waterline_tile' as const, unit:'m2' as const, price:'' });

  const onSave = async (e?: React.FormEvent) => {
    e?.preventDefault();
    if (!form.name || !form.category || !form.unit) { toast.error('Name, Category, Unit are required'); return; }
    setSaving(true);
    try {
      const created = await createMaterialForce(form);
      if (!created?.id) throw new Error('No id returned from /api/materials/_force');
      upsert(created);
      toast.success(`Saved “${created.name}”`);
      onClose();
    } catch (err: any) {
      console.error('[materials/_force] save error', err);
      toast.error(err.message || 'Save failed');
    } finally {
      setSaving(false);
    }
  };

  return (
    <form onSubmit={onSave} className="p-4 space-y-4">
      {/* your inputs; ensure they bind to `form` */}
      <div className="flex gap-2">
        <button type="submit" disabled={saving} className="btn btn-primary">{saving ? 'Saving…' : 'Save'}</button>
        <button type="button" className="btn" onClick={onClose}>Cancel</button>
      </div>
      {SAVE_FORCE && <div className="text-xs opacity-70">Force save mode</div>}
    </form>
  );
}
Visible probe on Materials page, client/src/components/materials/MaterialsProbe.tsx

tsx
Copy code
import { useState, useEffect } from 'react';
import { debugMaterials, createMaterialForce } from '../../lib/materialsForceApi';
import { useMaterialsStore } from '../../state/materialsStore';

export function MaterialsProbe() {
  const upsert = useMaterialsStore(s => s.upsert);
  const [dbg, setDbg] = useState<any>(null);
  const [busy, setBusy] = useState(false);

  useEffect(() => {
    debugMaterials().then(setDbg).catch(e => setDbg({ ok:false, error:e.message }));
  }, []);

  return (
    <div className="mt-6 p-3 rounded border text-xs">
      <div>DB: {dbg?.ok ? 'OK' : 'FAIL'} {dbg?.error ? `— ${dbg.error}` : ''}</div>
      <div>materials count: {dbg?.count ?? '—'}</div>
      <button disabled={busy} className="btn btn-sm mt-2" onClick={async () => {
        setBusy(true);
        try {
          const created = await createMaterialForce({ name:`Probe ${Date.now()}`, category:'waterline_tile', unit:'m2', price: '123.45' });
          upsert(created);
          alert(`Inserted: ${created.id}`);
        } catch (e:any) {
          alert(`Force save failed: ${e.message}`);
        } finally {
          setBusy(false);
        }
      }}>Test Save (Force)</button>
      <a className="ml-3 underline" href="/api/_materials/debug" target="_blank" rel="noreferrer">Open Debug JSON</a>
    </div>
  );
}
Mount probe (dev only) at bottom of Materials page:

tsx
Copy code
{import.meta.env.MODE !== 'production' && <MaterialsProbe />}
===============================================================================
EDITOR SIDEBAR — GUARANTEE VISIBILITY
Ensure Sidebar reads from the same useMaterialsStore:

tsx
Copy code
const mats = useMaterialsStore(s => s.byCategory(activeCategory));
After upsert(created), the new card must appear instantly. If it does not, you are rendering from a different source; swap to the store above.

===============================================================================
KILL-SWITCH NOTES (AFTER IT WORKS)
Once Force Save proves DB writes, wire your normal Save back to /api/materials or /api/v2/materials.

Keep /api/_materials/debug for a day; then remove.

Set SAVE_MATERIALS_FORCE=false.

===============================================================================
5-MINUTE TRIAGE CHECKS (DO THESE RIGHT NOW)
Visit /api/_materials/debug in the browser → must show { ok:true, count: N, columns:[...] }.

On Materials page, click Test Save (Force) → it should alert Inserted: <uuid>. The new material appears in the grid/sidebar.

Use the normal Save in the drawer (still using force path behind flag) → material appears instantly.

Attach the new material to a mask → renders with default scale.

If any step fails, the UI or debug endpoint will show the exact hop (API unreachable, DB insert error, store not updated). Fix that line. No guessing.

ACCEPTANCE

A brand-new material is saved via /api/materials/_force, returns 201 with id, updates the shared store, appears in Library & Sidebar, and is attachable in the editor — today, not later.